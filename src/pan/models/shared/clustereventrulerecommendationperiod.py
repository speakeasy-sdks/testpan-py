"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clustereventrulerecommendation as shared_clustereventrulerecommendation
from ..shared import recommendationtimeperiod as shared_recommendationtimeperiod
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ClusterEventRuleRecommendationPeriod:
    cluster_event_rule_recommendations: Optional[list[shared_clustereventrulerecommendation.ClusterEventRuleRecommendation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterEventRuleRecommendations'), 'exclude': lambda f: f is None }})
    time_period: Optional[shared_recommendationtimeperiod.RecommendationTimePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timePeriod'), 'exclude': lambda f: f is None }})
    total_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalEvents'), 'exclude': lambda f: f is None }})
    

