"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalinfo as shared_additionalinfo
from ..shared import apisecurityriskseverity as shared_apisecurityriskseverity
from ..shared import riskconfidenceenum as shared_riskconfidenceenum
from ..shared import risktrendenum as shared_risktrendenum
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CategoryScoreGradeNoFindings:
    critical: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('critical') }})
    high: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('high') }})
    low: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('low') }})
    medium: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('medium') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    risk: shared_apisecurityriskseverity.APISecurityRiskSeverity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('risk') }})
    r"""An `enum`eration."""
    scorer_version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scorer_version') }})
    unclassified: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unclassified') }})
    additional_info: Optional[list[shared_additionalinfo.AdditionalInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_info'), 'exclude': lambda f: f is None }})
    confidence: Optional[shared_riskconfidenceenum.RiskConfidenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""An enumeration."""
    trend: Optional[shared_risktrendenum.RiskTrendEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trend'), 'exclude': lambda f: f is None }})
    r"""An enumeration."""
    

