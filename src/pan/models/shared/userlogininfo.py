"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from .accounttier import AccountTier
from .apisecurity import APISecurity
from .permissionsmode import PermissionsMode
from .pricingunittype import PricingUnitType
from .role import Role
from .serverlesssecurity import ServerlessSecurity
from .usagestatus import UsageStatus
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from pan import utils
from typing import Optional

class UserLoginInfoStatus(str, Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserLoginInfo:
    account_tier: AccountTier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountTier') }})
    r"""K8s security product tier"""
    api_security: APISecurity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiSecurity') }})
    r"""Mode of the API security"""
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullName') }})
    pricing_unit_type: PricingUnitType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingUnitType') }})
    serverless_security: ServerlessSecurity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverlessSecurity') }})
    r"""Mode of the Serverless security"""
    status: UserLoginInfoStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The Secure Application account ID to which the user belongs"""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email of the user."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the user as created by Secure Application management."""
    last_login: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLogin'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    permissions_mode: Optional[PermissionsMode] = dataclasses.field(default=PermissionsMode.NORMAL, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionsMode'), 'exclude': lambda f: f is None }})
    role: Optional[Role] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role of the user"""
    should_display_eula: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shouldDisplayEula'), 'exclude': lambda f: f is None }})
    should_display_product_tour: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shouldDisplayProductTour'), 'exclude': lambda f: f is None }})
    usage_status: Optional[UsageStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageStatus'), 'exclude': lambda f: f is None }})
    r"""Account resource usage status"""
    

