"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import accounttier as shared_accounttier
from ..shared import apisecurity as shared_apisecurity
from ..shared import permissionsmode as shared_permissionsmode
from ..shared import pricingunittype as shared_pricingunittype
from ..shared import role as shared_role
from ..shared import serverlesssecurity as shared_serverlesssecurity
from ..shared import usagestatus as shared_usagestatus
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from pan import utils
from typing import Optional

class UserLoginInfoStatus(str, Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class UserLoginInfo:
    account_tier: shared_accounttier.AccountTier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountTier') }})
    r"""K8s security product tier"""
    api_security: shared_apisecurity.APISecurity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiSecurity') }})
    r"""Mode of the API security"""
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullName') }})
    pricing_unit_type: shared_pricingunittype.PricingUnitType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingUnitType') }})
    serverless_security: shared_serverlesssecurity.ServerlessSecurity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serverlessSecurity') }})
    r"""Mode of the Serverless security"""
    status: UserLoginInfoStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The Secure Application account ID to which the user belongs"""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email of the user."""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the user as created by Secure Application management."""
    last_login: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastLogin'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'exclude': lambda f: f is None }})
    permissions_mode: Optional[shared_permissionsmode.PermissionsMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissionsMode'), 'exclude': lambda f: f is None }})
    role: Optional[shared_role.Role] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role of the user"""
    should_display_eula: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shouldDisplayEula'), 'exclude': lambda f: f is None }})
    should_display_product_tour: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shouldDisplayProductTour'), 'exclude': lambda f: f is None }})
    usage_status: Optional[shared_usagestatus.UsageStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageStatus'), 'exclude': lambda f: f is None }})
    r"""Account resource usage status"""
    

