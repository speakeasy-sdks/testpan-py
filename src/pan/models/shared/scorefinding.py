"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .additionalinfo import AdditionalInfo
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import List, Optional


@dataclasses.dataclass
class Data:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScoreFinding:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Finding name"""
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Finding source or filled in with 'Undisclosed' if source cannot be revealed"""
    additional_info: Optional[List[AdditionalInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_info'), 'exclude': lambda f: f is None }})
    r"""Finding instance additional attributes"""
    data: Optional[List[Data]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Raw data filled in only for unclassified findings, when allowed"""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Finding description if finding has been classified, None otherwise"""
    mitigation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mitigation'), 'exclude': lambda f: f is None }})
    r"""Finding mitigation if finding has been classified, None otherwise"""
    occurrences: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurrences'), 'exclude': lambda f: f is None }})
    r"""Number of findings of the same type"""
    raw_finding_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_finding_id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the raw finding if available"""
    type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type_id'), 'exclude': lambda f: f is None }})
    r"""Finding type identifier if finding has been classified, None otherwise"""
    

