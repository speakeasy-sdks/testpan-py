"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .appruleorigin import AppRuleOrigin
from .apprulestatus import AppRuleStatus
from .appruletype import AppRuleType
from .workloadrulescopetype import WorkloadRuleScopeType
from .workloadruletype import WorkloadRuleType
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppRule:
    r"""A rule that states what Apps are allowed to run on what environments."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    rule_type_properties: AppRuleType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleTypeProperties') }})
    r"""identify the app rule type. Only one of the below should be not null, and  used."""
    status: AppRuleStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    app: Optional[WorkloadRuleType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app'), 'exclude': lambda f: f is None }})
    r"""identify the workload type. Only one of the below should be not null, and  used."""
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    rule_origin: Optional[AppRuleOrigin] = dataclasses.field(default=AppRuleOrigin.USER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleOrigin'), 'exclude': lambda f: f is None }})
    scope: Optional[WorkloadRuleScopeType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""identify the scope type. Only one of the below should be not null, and  used."""
    

