"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .connectionsrulerecommendation import ConnectionsRuleRecommendation
from .recommendationtimeperiod import RecommendationTimePeriod
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectionsRuleRecommendationPeriod:
    connections_rule_recommendations: Optional[List[ConnectionsRuleRecommendation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionsRuleRecommendations'), 'exclude': lambda f: f is None }})
    time_period: Optional[RecommendationTimePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timePeriod'), 'exclude': lambda f: f is None }})
    total_connections: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalConnections'), 'exclude': lambda f: f is None }})
    

