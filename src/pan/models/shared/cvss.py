"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .attackvector import AttackVector
from .cvssrisklevel import CvssRiskLevel
from .scope import Scope
from .userinteraction import UserInteraction
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Cvss:
    attack_complexity: Optional[CvssRiskLevel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attackComplexity'), 'exclude': lambda f: f is None }})
    attack_vector: Optional[AttackVector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attackVector'), 'exclude': lambda f: f is None }})
    availability_impact: Optional[CvssRiskLevel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availabilityImpact'), 'exclude': lambda f: f is None }})
    confidentiality_impact: Optional[CvssRiskLevel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidentialityImpact'), 'exclude': lambda f: f is None }})
    integrity_impact: Optional[CvssRiskLevel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrityImpact'), 'exclude': lambda f: f is None }})
    privileges_required: Optional[CvssRiskLevel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privilegesRequired'), 'exclude': lambda f: f is None }})
    scope: Optional[Scope] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    user_interaction: Optional[UserInteraction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userInteraction'), 'exclude': lambda f: f is None }})
    

