"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dashboardtimebasedgraph as shared_dashboardtimebasedgraph
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class DashboardTimeBasedGraphs:
    last_day: Optional[shared_dashboardtimebasedgraph.DashboardTimeBasedGraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastDay'), 'exclude': lambda f: f is None }})
    last_hour: Optional[shared_dashboardtimebasedgraph.DashboardTimeBasedGraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastHour'), 'exclude': lambda f: f is None }})
    last_month: Optional[shared_dashboardtimebasedgraph.DashboardTimeBasedGraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastMonth'), 'exclude': lambda f: f is None }})
    last_week: Optional[shared_dashboardtimebasedgraph.DashboardTimeBasedGraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastWeek'), 'exclude': lambda f: f is None }})
    

