"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .serverlessruleaction import ServerlessRuleAction
from .serverlessruleorigin import ServerlessRuleOrigin
from .serverlessrulescope import ServerlessRuleScope
from .serverlessrulestatus import ServerlessRuleStatus
from .serverlessruletype import ServerlessRuleType
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerlessRule:
    r"""A rule that states what serverless function are allowed and where."""
    action: ServerlessRuleAction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""serverless rule action"""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    rule: ServerlessRuleType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rule') }})
    r"""identify the serverless functions matching type. Only one of the below should be not null, and  used."""
    status: ServerlessRuleStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    rule_origin: Optional[ServerlessRuleOrigin] = dataclasses.field(default=ServerlessRuleOrigin.USER, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleOrigin'), 'exclude': lambda f: f is None }})
    scope: Optional[List[ServerlessRuleScope]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    

