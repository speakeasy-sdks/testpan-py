"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .serverlessdefaultrule import ServerlessDefaultRule
from .serverlessruleaction import ServerlessRuleAction
from .serverlessuserrule import ServerlessUserRule
from .serverlessviolationreason import ServerlessViolationReason
from .unidentifiedserverlessrule import UnidentifiedServerlessRule
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerlessViolationInfo:
    default_rule: Optional[ServerlessDefaultRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultRule'), 'exclude': lambda f: f is None }})
    rule_action: Optional[ServerlessRuleAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleAction'), 'exclude': lambda f: f is None }})
    r"""serverless rule action"""
    unidentified_serverless_rule: Optional[UnidentifiedServerlessRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unidentifiedServerlessRule'), 'exclude': lambda f: f is None }})
    user_rule: Optional[ServerlessUserRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRule'), 'exclude': lambda f: f is None }})
    r"""used for violation in ServerlessFunction"""
    violation_reasons: Optional[List[ServerlessViolationReason]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('violationReasons'), 'exclude': lambda f: f is None }})
    

