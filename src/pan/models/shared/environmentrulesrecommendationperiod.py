"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .environmentrulerecommendation import EnvironmentRuleRecommendation
from .recommendationtimeperiod import RecommendationTimePeriod
from dataclasses_json import Undefined, dataclass_json
from pan import utils
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnvironmentRulesRecommendationPeriod:
    environment_rules_recommendations: Optional[List[EnvironmentRuleRecommendation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentRulesRecommendations'), 'exclude': lambda f: f is None }})
    time_period: Optional[RecommendationTimePeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timePeriod'), 'exclude': lambda f: f is None }})
    total_workloads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalWorkloads'), 'exclude': lambda f: f is None }})
    

