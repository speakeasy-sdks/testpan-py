"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ownerresponse as shared_ownerresponse
from enum import Enum
from typing import Optional

class GetRiskAssessmentPermissionsClusterIDOwnerType(str, Enum):
    r"""owner type"""
    SERVICEACCOUNT = 'SERVICEACCOUNT'
    USER = 'USER'
    GROUP = 'GROUP'

class GetRiskAssessmentPermissionsClusterIDPermissionRisk(str, Enum):
    r"""the risk to filter by"""
    NO_RISK = 'NO_RISK'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    APPROVED = 'APPROVED'

class GetRiskAssessmentPermissionsClusterIDSortDir(str, Enum):
    r"""sorting direction"""
    ASC = 'ASC'
    DESC = 'DESC'

class GetRiskAssessmentPermissionsClusterIDSortKey(str, Enum):
    r"""sort key"""
    OWNER = 'owner'
    OWNER_TYPE = 'ownerType'



@dataclasses.dataclass
class GetRiskAssessmentPermissionsClusterIDRequest:
    cluster_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'clusterId', 'style': 'simple', 'explode': False }})
    include_system_owners: Optional[bool] = dataclasses.field(default=False, metadata={'query_param': { 'field_name': 'includeSystemOwners', 'style': 'form', 'explode': True }})
    r"""include systems default owners"""
    max_results: Optional[float] = dataclasses.field(default=100, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The number of entries to return (pagination)"""
    namespace_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'namespaceName', 'style': 'form', 'explode': True }})
    r"""the namespace name to filter by"""
    no_pagination: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'noPagination', 'style': 'form', 'explode': True }})
    r"""When true, the pagination params will be ignored"""
    offset: Optional[float] = dataclasses.field(default=0, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Return entries from this offset (pagination)"""
    owner: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owner', 'style': 'form', 'explode': True }})
    r"""owner name"""
    owner_type: Optional[GetRiskAssessmentPermissionsClusterIDOwnerType] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ownerType', 'style': 'form', 'explode': True }})
    r"""owner type"""
    permission_risk: Optional[GetRiskAssessmentPermissionsClusterIDPermissionRisk] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'permissionRisk', 'style': 'form', 'explode': True }})
    r"""the risk to filter by"""
    sort_dir: Optional[GetRiskAssessmentPermissionsClusterIDSortDir] = dataclasses.field(default=GetRiskAssessmentPermissionsClusterIDSortDir.ASC, metadata={'query_param': { 'field_name': 'sortDir', 'style': 'form', 'explode': True }})
    r"""sorting direction"""
    sort_key: Optional[GetRiskAssessmentPermissionsClusterIDSortKey] = dataclasses.field(default=GetRiskAssessmentPermissionsClusterIDSortKey.OWNER, metadata={'query_param': { 'field_name': 'sortKey', 'style': 'form', 'explode': True }})
    r"""sort key"""
    




@dataclasses.dataclass
class GetRiskAssessmentPermissionsClusterIDResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    owner_response: Optional[shared_ownerresponse.OwnerResponse] = dataclasses.field(default=None)
    r"""Success"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

