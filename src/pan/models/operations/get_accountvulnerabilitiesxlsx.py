"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import List, Optional


@dataclasses.dataclass
class GetAccountVulnerabilitiesXlsxRequest:
    image_hash: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IMAGE_HASH', 'style': 'form', 'explode': False }})
    r"""Filter images by HASH"""
    image_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IMAGE_NAME', 'style': 'form', 'explode': False }})
    r"""Filter images by name"""
    image_tag: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IMAGE_TAG', 'style': 'form', 'explode': False }})
    r"""Filter images by tags"""
    vulnerability_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vulnerabilityName', 'style': 'form', 'explode': True }})
    r"""Filter images by vulnerability name"""
    



@dataclasses.dataclass
class GetAccountVulnerabilitiesXlsxResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    

