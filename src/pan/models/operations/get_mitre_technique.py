"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import mitretechniqueinfo as shared_mitretechniqueinfo
from enum import Enum
from typing import Optional

class GetMitreTechniqueMitreTechniqueType(str, Enum):
    r"""MITRE technique type"""
    COMPROMISED_IMAGES = 'COMPROMISED_IMAGES'
    UNAUTHORISED_REGISTRIES_USAGE = 'UNAUTHORISED_REGISTRIES_USAGE'
    SUSPICIOUS_DEPLOYMENT = 'SUSPICIOUS_DEPLOYMENT'
    VULNERABLE_APPLICATION = 'VULNERABLE_APPLICATION'
    EXPOSED_K8_S_DASHBOARD = 'EXPOSED_K8S_DASHBOARD'
    EXPLOIT_PUBLIC_FACING_APPLICATION = 'EXPLOIT_PUBLIC_FACING_APPLICATION'
    CONTAINER_SERVICE = 'CONTAINER_SERVICE'
    DEPLOY_CONTAINER = 'DEPLOY_CONTAINER'
    SSH_CONNECTION = 'SSH_CONNECTION'
    WRITEABLE_HOST_PATH = 'WRITEABLE_HOST_PATH'
    CRON_JOBS = 'CRON_JOBS'
    PRIVILEGED_OR_ROOT_CONTAINER = 'PRIVILEGED_OR_ROOT_CONTAINER'
    PRIVILEGE_ESCALATION_ENABLED = 'PRIVILEGE_ESCALATION_ENABLED'
    CLUSTER_ADMIN_BINDING = 'CLUSTER_ADMIN_BINDING'
    UNAUTHORIZED_CLUSTER_ADMIN_BINDING = 'UNAUTHORIZED_CLUSTER_ADMIN_BINDING'
    ACCESS_CLUSTER_RESOURCES = 'ACCESS_CLUSTER_RESOURCES'
    CLEAR_CONTAINER_LOGS = 'CLEAR_CONTAINER_LOGS'
    CLEAR_K8_S_EVENTS = 'CLEAR_K8S_EVENTS'
    LIST_SECRETS = 'LIST_SECRETS'
    SERVICE_ACCOUNT_ACCESS = 'SERVICE_ACCOUNT_ACCESS'
    CONTAINER_RESOURCE_DISCOVERY = 'CONTAINER_RESOURCE_DISCOVERY'
    CLUSTER_INTERNAL_NETWORKING = 'CLUSTER_INTERNAL_NETWORKING'
    TILLER_ENDPOINT_ACCESS = 'TILLER_ENDPOINT_ACCESS'
    DATA_DESTRUCTION = 'DATA_DESTRUCTION'



@dataclasses.dataclass
class GetMitreTechniqueRequest:
    mitre_technique_type: GetMitreTechniqueMitreTechniqueType = dataclasses.field(metadata={'query_param': { 'field_name': 'mitreTechniqueType', 'style': 'form', 'explode': True }})
    r"""MITRE technique type"""
    clusters_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clustersIds', 'style': 'form', 'explode': True }})
    r"""the clusters ids to filter by"""
    




@dataclasses.dataclass
class GetMitreTechniqueResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    mitre_technique_info: Optional[shared_mitretechniqueinfo.MitreTechniqueInfo] = dataclasses.field(default=None)
    r"""Success"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

