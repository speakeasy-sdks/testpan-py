"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apiresponse as shared_apiresponse
from ..shared import kubernetesservice as shared_kubernetesservice
from typing import Optional



@dataclasses.dataclass
class GetKubernetesClustersKubernetesClusterIDServicesRequest:
    kubernetes_cluster_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'kubernetesClusterId', 'style': 'simple', 'explode': False }})
    r"""Secure Application Kubernetes cluster ID"""
    show_istio_only: Optional[bool] = dataclasses.field(default=False, metadata={'query_param': { 'field_name': 'showIstioOnly', 'style': 'form', 'explode': True }})
    r"""if true, return only services deployed on namespace with label istio-injection=enabled"""
    




@dataclasses.dataclass
class GetKubernetesClustersKubernetesClusterIDServicesResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    api_response: Optional[shared_apiresponse.APIResponse] = dataclasses.field(default=None)
    r"""unknown error"""
    kubernetes_services: Optional[list[shared_kubernetesservice.KubernetesService]] = dataclasses.field(default=None)
    r"""success"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

