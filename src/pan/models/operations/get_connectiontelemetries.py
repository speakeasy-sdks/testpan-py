"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import connectiontelemetry as shared_connectiontelemetry
from datetime import datetime
from enum import Enum
from typing import List, Optional

class LogicalOperator(str, Enum):
    r"""Logical operator between the source group and the target group filters"""
    AND = 'and'
    OR = 'or'

class GetConnectionTelemetriesQueryParamResult(str, Enum):
    DETECT = 'DETECT'
    BLOCK = 'BLOCK'
    ALLOW = 'ALLOW'
    ENCRYPT = 'ENCRYPT'

class GetConnectionTelemetriesQueryParamSortDir(str, Enum):
    r"""sorting direction"""
    ASC = 'ASC'
    DESC = 'DESC'

class GetConnectionTelemetriesQueryParamSortKey(str, Enum):
    r"""sort key"""
    SOURCE_APP_NAME = 'sourceAppName'
    SOURCE_APP_TYPE = 'sourceAppType'
    SOURCE_ENVIRONMENT_NAME = 'sourceEnvironmentName'
    SOURCE_EXECUTABLE = 'sourceExecutable'
    SOURCE_RISK = 'sourceRisk'
    SOURCE_HOST_NAME = 'sourceHostName'
    TARGET_APP_NAME = 'targetAppName'
    TARGET_APP_TYPE = 'targetAppType'
    TARGET_ENVIRONMENT_NAME = 'targetEnvironmentName'
    TARGET_EXECUTABLE = 'targetExecutable'
    TARGET_RISK = 'targetRisk'
    TARGET_HOST_NAME = 'targetHostName'
    FIRST_SEEN = 'firstSeen'
    LAST_SEEN = 'lastSeen'
    TOTAL = 'total'

class SourceRisk(str, Enum):
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'

class TargetRisk(str, Enum):
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'


@dataclasses.dataclass
class GetConnectionTelemetriesRequest:
    end_time: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'endTime', 'style': 'form', 'explode': True }})
    r"""End date of the query"""
    sort_key: GetConnectionTelemetriesQueryParamSortKey = dataclasses.field(metadata={'query_param': { 'field_name': 'sortKey', 'style': 'form', 'explode': True }})
    r"""sort key"""
    start_time: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'startTime', 'style': 'form', 'explode': True }})
    r"""Start date of the query"""
    download_as_xlsx: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'downloadAsXlsx', 'style': 'form', 'explode': True }})
    r"""When true, the API will return an xlsx file, and pagination will be ignored"""
    logical_operator: Optional[LogicalOperator] = dataclasses.field(default=LogicalOperator.AND, metadata={'query_param': { 'field_name': 'logicalOperator', 'style': 'form', 'explode': True }})
    r"""Logical operator between the source group and the target group filters"""
    max_results: Optional[float] = dataclasses.field(default=100, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The number of entries to return (pagination)"""
    offset: Optional[float] = dataclasses.field(default=0, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Return entries from this offset (pagination)"""
    result: Optional[List[GetConnectionTelemetriesQueryParamResult]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'result', 'style': 'form', 'explode': False }})
    r"""connection result filter"""
    show_only_violations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showOnlyViolations', 'style': 'form', 'explode': True }})
    r"""When true, the API will only return entries that violate the active policy"""
    sort_dir: Optional[GetConnectionTelemetriesQueryParamSortDir] = dataclasses.field(default=GetConnectionTelemetriesQueryParamSortDir.ASC, metadata={'query_param': { 'field_name': 'sortDir', 'style': 'form', 'explode': True }})
    r"""sorting direction"""
    source_app_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceAppName', 'style': 'form', 'explode': False }})
    source_environment_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceEnvironmentName', 'style': 'form', 'explode': False }})
    source_executable: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceExecutable', 'style': 'form', 'explode': False }})
    source_host_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceHostName', 'style': 'form', 'explode': False }})
    source_namespaces_filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceNamespacesFilter', 'style': 'form', 'explode': True }})
    r"""namespace filter for source in connection telemetries, a base 64 representation of a NamespacesFilter definition object"""
    source_risk: Optional[List[SourceRisk]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceRisk', 'style': 'form', 'explode': False }})
    target_app_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetAppName', 'style': 'form', 'explode': False }})
    target_environment_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetEnvironmentName', 'style': 'form', 'explode': False }})
    target_executable: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetExecutable', 'style': 'form', 'explode': False }})
    target_host_name: Optional[List[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetHostName', 'style': 'form', 'explode': False }})
    target_namespaces_filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetNamespacesFilter', 'style': 'form', 'explode': True }})
    r"""namespace filter for target in connection telemetries. a base 64 representation of a NamespacesFilter definition object"""
    target_risk: Optional[List[TargetRisk]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetRisk', 'style': 'form', 'explode': False }})
    



@dataclasses.dataclass
class GetConnectionTelemetriesResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    classes: Optional[List[shared_connectiontelemetry.ConnectionTelemetry]] = dataclasses.field(default=None)
    r"""Success"""
    

