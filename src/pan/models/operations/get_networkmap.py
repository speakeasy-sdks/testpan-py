"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import backgroundjobresponse as shared_backgroundjobresponse
from ..shared import networkmap as shared_networkmap
from datetime import datetime
from enum import Enum
from typing import Optional

class GetNetworkMapAPIRisk(str, Enum):
    r"""minimum api risk level"""
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'
    NEUTRAL = 'NEUTRAL'
    UNKNOWN = 'UNKNOWN'



@dataclasses.dataclass
class GetNetworkMapRequest:
    end_time: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'endTime', 'style': 'form', 'explode': True }})
    r"""End date of the query"""
    start_time: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'startTime', 'style': 'form', 'explode': True }})
    r"""Start date of the query"""
    api_risk: Optional[GetNetworkMapAPIRisk] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'apiRisk', 'style': 'form', 'explode': True }})
    r"""minimum api risk level"""
    apps: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'apps', 'style': 'form', 'explode': False }})
    r"""Array of App names"""
    environments: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'environments', 'style': 'form', 'explode': False }})
    r"""Array of environments names"""
    exclude_apps: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'excludeApps', 'style': 'form', 'explode': False }})
    r"""Array of App/pod names to exclude"""
    group_apps_on_the_same_environment: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'groupAppsOnTheSameEnvironment', 'style': 'form', 'explode': True }})
    r"""When true, the API will aggregate Apps that are on the same environment"""
    ignore_external_connection: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ignoreExternalConnection', 'style': 'form', 'explode': True }})
    r"""When true, the API will ignore connections coming from external IP addresses"""
    is_background_job: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isBackgroundJob', 'style': 'form', 'explode': True }})
    r"""should run as background job or not"""
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'labels', 'style': 'form', 'explode': False }})
    r"""Array of labels. Each label is a string with format key:value"""
    namespaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'namespaces', 'style': 'form', 'explode': False }})
    r"""Array of namespaces ids"""
    show_only_apps_with_connections: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showOnlyAppsWithConnections', 'style': 'form', 'explode': True }})
    r"""When true, the API will only return Apps with connections"""
    show_only_apps_with_violations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showOnlyAppsWithViolations', 'style': 'form', 'explode': True }})
    r"""When true, the API will only return Apps that violated the active policy"""
    show_only_connections_between_environments: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showOnlyConnectionsBetweenEnvironments', 'style': 'form', 'explode': True }})
    r"""When true, the API will only return connections between environments"""
    show_only_connections_with_violations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showOnlyConnectionsWithViolations', 'style': 'form', 'explode': True }})
    r"""When true, the API will only return connections that violate the active policy"""
    




@dataclasses.dataclass
class GetNetworkMapResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    background_job_response: Optional[shared_backgroundjobresponse.BackgroundJobResponse] = dataclasses.field(default=None)
    r"""Accepted"""
    network_map: Optional[shared_networkmap.NetworkMap] = dataclasses.field(default=None)
    r"""Success"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

